import dateConfig from "./dateConfig";

type documentSchemaTypeName = "Project" | "Publication" | "Story";
type listingSchemaTypeName = "Projects Listing" | "Publications Listing";
type fieldRequirement = "required" | "optional" | string;

const descriptionConfig = {
	title: (documentSchemaTypeName: documentSchemaTypeName, fieldRequirement: fieldRequirement) => `The title of this ${documentSchemaTypeName}. This field is ${fieldRequirement}.`,
	subtitle: (documentSchemaTypeName: documentSchemaTypeName, fieldRequirement: fieldRequirement) => `The subtitle of this ${documentSchemaTypeName}. This field is ${fieldRequirement}.`,
	slug: (documentSchemaTypeName: documentSchemaTypeName, fieldRequirement: fieldRequirement) => `The URL-friendly identifier for this ${documentSchemaTypeName}, generated from its title. Click on \"Generate\" to create a slug from the title. Changing the slug after this ${documentSchemaTypeName} is published and circulated could lead to broken links and cause accessibility issues for users who have bookmarked or shared the previous URL. This field is ${fieldRequirement}.`,
	complexDate: (documentSchemaTypeName: documentSchemaTypeName, listingSchemaTypeName: listingSchemaTypeName, fieldRequirement: fieldRequirement) => `The date(s) attributed to this ${documentSchemaTypeName} in ${dateConfig.dateStandard} format (${dateConfig.dateFormat}). This field is ${fieldRequirement}. Will be used for chronological sorting within the ${listingSchemaTypeName}`,
	date: (documentSchemaTypeName: documentSchemaTypeName, listingSchemaTypeName: listingSchemaTypeName, fieldRequirement: fieldRequirement, trailingString: string = "") => `The date attributed to this ${documentSchemaTypeName} in ${dateConfig.dateStandard} format (${dateConfig.dateFormat}). This field is ${fieldRequirement}. Will be used for chronological sorting within the ${listingSchemaTypeName}. ${trailingString}`,
	profiles: (documentSchemaTypeName: documentSchemaTypeName, fieldRequirement: fieldRequirement) => `Profiles associated with this ${documentSchemaTypeName}. This field is ${fieldRequirement}, and is currently not in use anywhere.`,
	clients: (documentSchemaTypeName: documentSchemaTypeName, fieldRequirement: fieldRequirement) => `Clients associated with this ${documentSchemaTypeName}. This field is ${fieldRequirement}, and is currently not displayed anywhere on the website.`,
	locations: (documentSchemaTypeName: documentSchemaTypeName, listingSchemaTypeName: listingSchemaTypeName, fieldRequirement: fieldRequirement) => `Locations associated with this ${documentSchemaTypeName}. Will appear as tags in various places and be used for filtering within the ${listingSchemaTypeName}. This field is ${fieldRequirement}.`,
	types: (documentSchemaTypeName: documentSchemaTypeName, listingSchemaTypeName: listingSchemaTypeName, fieldRequirement: fieldRequirement) => `Types associated with this ${documentSchemaTypeName}. Will appear as tags in various places and be used for filtering within the ${listingSchemaTypeName}. This field is ${fieldRequirement}. At least one type must be selected.`,
	subjects: (documentSchemaTypeName: documentSchemaTypeName, listingSchemaTypeName: listingSchemaTypeName, fieldRequirement: fieldRequirement) => `Subjects associated with this ${documentSchemaTypeName}. Will appear as tags in various places and be used for filtering within the ${listingSchemaTypeName}. This field is ${fieldRequirement}.`,
	collections: (documentSchemaTypeName: documentSchemaTypeName, listingSchemaTypeName: listingSchemaTypeName, fieldRequirement: fieldRequirement) => `Collections associated with this ${documentSchemaTypeName}. Will appear as tags in various places and be used for filtering within the ${listingSchemaTypeName}. This field is ${fieldRequirement}.`,
	mainImage: (documentSchemaTypeName: documentSchemaTypeName, listingSchemaTypeName: listingSchemaTypeName, fieldRequirement: fieldRequirement, trailingString: string = "") => `The main image associated with this ${documentSchemaTypeName}. Will appear in the card generated for this ${documentSchemaTypeName} in the ${listingSchemaTypeName}, in callouts, and in social media shares. Selecting an image is ${fieldRequirement}. Click on the crop icon located in the top right corner of the image to adjust its composition or define its focal point. ${trailingString}`,
	description: (documentSchemaTypeName: documentSchemaTypeName, listingSchemaTypeName: listingSchemaTypeName, fieldRequirement: fieldRequirement) => `A brief description or summary of this ${documentSchemaTypeName}. Will appear in the card generated for this ${documentSchemaTypeName} in the ${listingSchemaTypeName}, in callouts, and in social media shares and Google Search results. This field is ${fieldRequirement}. A good blurb is typically concise yet informative. Aim for around 1 to 2 sentences, providing enough information to give readers a brief overview without overwhelming them with details.`,
	credits: (documentSchemaTypeName: documentSchemaTypeName, fieldRequirement: fieldRequirement) => `Credits associated with this ${documentSchemaTypeName}. This field is ${fieldRequirement}.`,
	relatedProjects: (documentSchemaTypeName: documentSchemaTypeName, fieldRequirement: fieldRequirement) => `Projects related to this ${documentSchemaTypeName}. This field is ${fieldRequirement}.`,
	relatedPublications: (documentSchemaTypeName: documentSchemaTypeName, fieldRequirement: fieldRequirement) => `Publications related to this ${documentSchemaTypeName}. This field is ${fieldRequirement}.`,
	relatedNews: (documentSchemaTypeName: documentSchemaTypeName, fieldRequirement: fieldRequirement) => `News items related to this ${documentSchemaTypeName}. This field is ${fieldRequirement}.`,
	relatedPress: (documentSchemaTypeName: documentSchemaTypeName, fieldRequirement: fieldRequirement) => `Press items related to this ${documentSchemaTypeName}. This field is ${fieldRequirement}.`,
	page: (documentSchemaTypeName: documentSchemaTypeName) => `The page builder for this ${documentSchemaTypeName}.`,
	isListed: (documentSchemaTypeName: documentSchemaTypeName, listingSchemaTypeName: listingSchemaTypeName, fieldRequirement: fieldRequirement, fieldDefault: string) => `Specifies whether this ${documentSchemaTypeName} can appear in the ${listingSchemaTypeName}. This field is ${fieldRequirement}. Default state: ${fieldDefault}.`,
	listingDisplaySize: (documentSchemaTypeName: documentSchemaTypeName, listingSchemaTypeName: listingSchemaTypeName, fieldRequirement: fieldRequirement, fieldDefault: string) => `The size of the card generated for this ${documentSchemaTypeName} in the ${listingSchemaTypeName}. This field is ${fieldRequirement}. Default value: ${fieldDefault}.`,
	listingAlignment: (documentSchemaTypeName: documentSchemaTypeName, listingSchemaTypeName: listingSchemaTypeName, fieldRequirement: fieldRequirement, fieldDefault: string) => `The alignment of the card generated for this ${documentSchemaTypeName} in the ${listingSchemaTypeName}. This field is ${fieldRequirement}. Default value: ${fieldDefault}.`,
	body: (documentSchemaTypeName: documentSchemaTypeName, fieldRequirement: fieldRequirement, trailingString: string = "") => `The body of this ${documentSchemaTypeName}. This field is ${fieldRequirement}. ${trailingString}`,
};

export default descriptionConfig;